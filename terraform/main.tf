# Generated by Copilot
# AWS Provider configuration
provider "aws" {
  region = var.aws_region
}

# Create an S3 bucket for application data
resource "aws_s3_bucket" "ep_tracker_data" {
  bucket = "ep-tracker-data-${data.aws_caller_identity.current.account_id}"

  tags = {
    Name        = "EP Tracker Data"
    Environment = "Production"
  }
}

# Block public access to the S3 bucket
resource "aws_s3_bucket_public_access_block" "ep_tracker_data_block" {
  bucket = aws_s3_bucket.ep_tracker_data.id

  block_public_acls       = true
  block_public_policy     = true
  ignore_public_acls      = true
  restrict_public_buckets = true
}

# Enable versioning on the S3 bucket
resource "aws_s3_bucket_versioning" "ep_tracker_data_versioning" {
  bucket = aws_s3_bucket.ep_tracker_data.id
  versioning_configuration {
    status = "Enabled"
  }
}

# Get the AWS caller identity for use in the S3 bucket name
data "aws_caller_identity" "current" {}

# Create an ECR repository for the Docker image
resource "aws_ecr_repository" "ep_tracker_api" {
  name                 = "ep-tracker-api"
  image_tag_mutability = "MUTABLE"

  image_scanning_configuration {
    scan_on_push = true
  }
}

# IAM role for App Runner service
resource "aws_iam_role" "app_runner_service_role" {
  name = "EPTrackerAppRunnerServiceRole"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "build.apprunner.amazonaws.com"
        }
      }
    ]
  })
}

# Attach ECR access policy to the role
resource "aws_iam_role_policy_attachment" "app_runner_ecr_policy" {
  role       = aws_iam_role.app_runner_service_role.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSAppRunnerServicePolicyForECRAccess"
}

# S3 access policy for App Runner
resource "aws_iam_policy" "s3_access_policy" {
  name        = "EPTrackerS3Access"
  description = "Policy for accessing EP Tracker S3 bucket"

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = [
          "s3:GetObject",
          "s3:PutObject",
          "s3:ListBucket",
          "s3:DeleteObject"
        ]
        Resource = [
          "${aws_s3_bucket.ep_tracker_data.arn}",
          "${aws_s3_bucket.ep_tracker_data.arn}/*"
        ]
      }
    ]
  })
}

# Attach S3 access policy to the role
resource "aws_iam_role_policy_attachment" "app_runner_s3_policy" {
  role       = aws_iam_role.app_runner_service_role.name
  policy_arn = aws_iam_policy.s3_access_policy.arn
}

# Create App Runner auto scaling configuration
resource "aws_apprunner_auto_scaling_configuration_version" "app_runner_auto_scaling" {
  auto_scaling_configuration_name = "ep-tracker-autoscaling"

  max_concurrency = 100
  max_size        = 5
  min_size        = 1

  tags = {
    Name = "EP Tracker Auto Scaling"
  }
}

# App Runner service
resource "aws_apprunner_service" "ep_tracker_api" {
  service_name = "ep-tracker-api"

  source_configuration {
    auto_deployments_enabled = true

    # Use code repository as source
    code_repository {
      repository_url = var.repository_url
      source_code_version {
        type  = "BRANCH"
        value = var.branch_name
      }
      code_configuration {
        configuration_source = "REPOSITORY"
      }
    }
  }

  instance_configuration {
    cpu    = "1 vCPU"
    memory = "2 GB"
  } # Pass environment variables to the service
  health_check_configuration {
    healthy_threshold   = 1
    interval            = 10
    path                = "/api/health"
    timeout             = 5
    unhealthy_threshold = 5
  }


  network_configuration {
    egress_configuration {
      egress_type = "DEFAULT"
    }
  }

  auto_scaling_configuration_arn = aws_apprunner_auto_scaling_configuration_version.app_runner_auto_scaling.arn

  tags = {
    Name        = "EP Tracker API"
    Environment = "Production"
  }
}



# Variables are defined in variables.tf
